The memory position of the buffers used to receive input are being leaked and printed. Although  this challenge doesnt make use of a system command it still allows for buffer overflows. Knowing the exact position in memory of the arrays we can also probably calculate the exact position of the return address  and overwrite to insert my own code.

Higher memory addresses (closer to 0x7fffffffffff)

| Return Address (4 Bytes) ->0x7fffffffe777
| Saved Frame Pointer (4 Bytes) -> 0x7fffffffe773
| greeting_text[127] -> (128) 0x7fffffffe76f
| ... greeting_text[i] ...
| greeting_text[0] -> 0x7fffffffe6f0
| buf[255] -> (256) 0x7fffffffe6ef
| ... buf[i] ...
| buf[0] -> 0x7fffffffe5f0

Lower memory addresses


So if we write 128 + 8 + 8 bytes we will overwrite the return address. Specifically we could in those last 8 bytes write 0x7fffffffe5f0 0x0 which is the address of buffer and then put shell code at the start of teh buffer to be executed.

Because greeting text already has 12 bytes in we only need to write 116 + 8 + 8 bytes which is 
